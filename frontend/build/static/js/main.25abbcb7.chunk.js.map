{"version":3,"sources":["graphql/queries.ts","reducers/pagination.ts","components/pagination.tsx","components/search.tsx","reducers/message.ts","thunks/message.ts","components/message.tsx","App.tsx","store.ts","index.tsx"],"names":["search","gql","updatePagination","start","last","currentPage","type","data","reducer","state","searchvalue","action","Resultpagination","props","useSelector","dispatch","useDispatch","pages","newPage","event","pageNumber","pageButton","target","innerText","includes","pagination","Number","searchObject","variables","name","page","total","i","push","Pagination","First","onClick","map","Item","active","key","Math","ceil","random","Last","Search","searchResult","className","onSubmit","preventDefault","input","inputvalue","value","searchAction","id","Button","variant","ListGroup","tracks","track","text","timeid","Message","Alert","App","message","time","useLazyQuery","queries","fetchPolicy","errorPolicy","getTracks","error","loading","rootstate","window","setTimeout","Container","Row","combineReducers","paginationReducer","messageReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","httpLink","HttpLink","uri","apollo","ApolloClient","cache","InMemoryCache","link","ReactDOM","render","ApolloProvider","client","document","getElementById"],"mappings":"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","file":"static/js/main.25abbcb7.chunk.js","sourcesContent":["import { gql } from '@apollo/client'\r\n\r\nconst search = gql`\r\nquery filter($name: String,$page: Int) {\r\n    search(track: $name,page: $page) \r\n    {\r\n          tracks\r\n          total\r\n    }\r\n  }`\r\n\r\n\r\n  export default {\r\n    search\r\n  }","\r\n\r\nimport { Action } from '../type'\r\n\r\n\r\nexport const setPagination = (start: number, last: number, searchvalue: string, currentPage: number) => {\r\n\r\n    return { type: 'SET', data: { start: start, last: last, searchvalue: searchvalue, currentPage: currentPage  } }\r\n}\r\n\r\nexport const updatePagination = (start: number, last: number, currentPage: number) => {\r\n\r\n    return { type: 'UPDATE', data: { start: start, last: last, currentPage: currentPage } }\r\n}\r\n\r\nexport const setPage = (currentPage: number) => {\r\n\r\n    return { type: 'SETPAGE', data: { currentPage: currentPage } }\r\n}\r\n\r\n\r\nconst reducer = (state = { start: 1, last: 10, searchvalue: '', currentPage: 1 }, action: Action) => {\r\n\r\n    switch (action.type) {\r\n        case 'SET':\r\n            return {\r\n                start: action.data.start,\r\n                last: action.data.last,\r\n                searchvalue: action.data.searchvalue,\r\n                currentPage: action.data.currentPage\r\n            }\r\n        case 'UPDATE':\r\n            return {\r\n                start: action.data.start,\r\n                last: action.data.last,\r\n                searchvalue: state.searchvalue,\r\n                currentPage: action.data.currentPage\r\n            }\r\n        case 'SETPAGE':\r\n            return {\r\n                start: state.start,\r\n                last: state.last,\r\n                searchvalue: state.searchvalue,\r\n                currentPage: action.data.currentPage\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport default reducer","import React,{ MouseEventHandler } from 'react';\r\nimport { useSelector } from 'react-redux'\r\nimport { updatePagination,setPage } from '../reducers/pagination'\r\nimport { SearchAttributes, PaginationType } from '../type';\r\nimport { Pagination } from 'react-bootstrap';\r\nimport { useDispatch } from 'react-redux'\r\n\r\n\r\nconst Resultpagination: React.FC<SearchAttributes> = (props) => {\r\n\r\n    const paginationState = (state: PaginationType) => state\r\n\r\n    const data = useSelector(paginationState)\r\n    const dispatch = useDispatch()\r\n    \r\n    const pages =[]\r\n\r\n\r\n    const newPage = (event: MouseEvent) => {\r\n\r\n        let pageButton =event.target as HTMLElement\r\n        let pageNumber\r\n        \r\n       \r\n        if(pageButton.innerText.includes('»')) {\r\n            pageNumber= data.pagination.last+1\r\n        }\r\n        else if(pageButton.innerText.includes('«')) {\r\n            pageNumber= data.pagination.start-1\r\n        }\r\n        else {\r\n            pageNumber = Number(pageButton.innerText); \r\n        }\r\n\r\n         \r\n        props.searchObject({ variables: { name:  data.pagination.searchvalue, page: pageNumber} })\r\n\r\n        if(pageNumber > data.pagination.last) {\r\n\r\n            \r\n            dispatch(updatePagination(pageNumber, (pageNumber+9) ,pageNumber))\r\n        }\r\n        else if(pageNumber < data.pagination.start) {\r\n\r\n            dispatch(updatePagination((pageNumber-9),pageNumber,pageNumber))\r\n\r\n        }\r\n        else {\r\n            dispatch(setPage(pageNumber))\r\n        }\r\n        \r\n    }\r\n\r\n    // Exception: page has less than ten rows\r\n    let last = data.pagination.last\r\n    last = props.total <  last ? props.total : last\r\n\r\n    \r\n    for (let i = data.pagination.start; i < last+1; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    \r\n    return (\r\n        <Pagination>\r\n\r\n            {data.pagination.start > 10 ? <Pagination.First onClick={newPage} /> : ''}\r\n\r\n           {pages.map((page: number) => (\r\n                <Pagination.Item active={page === data.pagination.currentPage} key={Math.ceil(Math.random() * 100000)} onClick={newPage}>{page}</Pagination.Item>\r\n           ))}\r\n          {props.total  < data.pagination.last ? '' : <Pagination.Last  onClick={newPage}  />}\r\n         \r\n        </Pagination>\r\n    )\r\n};\r\n\r\n\r\nexport default Resultpagination;","import React, { FormEvent } from 'react';\r\nimport { QueryTuple, Query } from '../type'\r\nimport { Button, ListGroup } from 'react-bootstrap'\r\nimport Resultpagination from '../components/pagination';\r\nimport { useDispatch } from 'react-redux'\r\nimport { setPagination } from '../reducers/pagination'\r\n\r\nconst Search: React.FC<QueryTuple> = (props) => {\r\n\r\n  const searchresult = props.searchResult as unknown \r\n  const data: Query = searchresult as Query  \r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const searchTracks = (event: FormEvent) => {\r\n\r\n    event.preventDefault()\r\n    const form = event.target as HTMLFormElement;\r\n    const input = form[0] as HTMLInputElement\r\n    const inputvalue = input.value\r\n\r\n    input.value = ''\r\n\r\n\r\n    props.searchAction({ variables: { name: inputvalue, page: 1 } })\r\n \r\n    dispatch(setPagination(1,10, inputvalue, 1))\r\n\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div >\r\n      <div className=\"container\">\r\n        <form onSubmit={searchTracks}>\r\n          <div className=\"form-group row\">\r\n            <div className=\"col-xs-2\">\r\n              <div>\r\n                <input className=\"form-control\" id=\"ex1\" type=\"text\" /></div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"form-group row\">\r\n            <div className=\"col-xs-2\">\r\n              <Button type=\"submit\" variant=\"primary\" >Search </Button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n        <ListGroup variant=\"flush\">\r\n          {data ? data.search.tracks.map((track: string) => (\r\n\r\n            <div key={Math.ceil(Math.random() * 100000)} className=\"form-group row\">\r\n              <div className=\"col-xs-2\">\r\n                <ListGroup.Item>{track}</ListGroup.Item>\r\n              </div>\r\n            </div>\r\n\r\n          )) : ''}\r\n        </ListGroup>\r\n      </div>\r\n      {data ? <Resultpagination total={data.search.total} searchObject={props.searchAction} /> : ''}\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\n\r\nexport default Search;","\r\n\r\nimport { ActionMessage } from '../type'\r\n\r\n\r\nexport const setMessage = (text: string) => {\r\n\r\n   \r\n    return { type: 'SET_MESSAGE', data: { text: text } }\r\n}\r\n\r\nexport const clearMessage = () => {\r\n\r\n\r\n    return { type: 'CLEAR_MESSAGE', data: { text: '' } }\r\n}\r\n\r\n\r\nconst reducer = (state = { text: '' }, action: ActionMessage) => {\r\n\r\n    switch (action.type) {\r\n        case 'SET_MESSAGE':\r\n            return {\r\n                text: action.data.text\r\n            }\r\n        case 'CLEAR_MESSAGE':\r\n            return {\r\n                text: action.data.text,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport default reducer","import { Action } from 'redux'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { MessageType } from '../type'\r\nimport { setMessage,clearMessage } from '../reducers/message'\r\n\r\nlet timeid=0\r\n\r\nexport const showMessage = (\r\n    message: string,time: number\r\n  ): ThunkAction<void, MessageType, unknown, Action<string>> =>  dispatch => {\r\n\r\n  if(timeid === 0) {\r\n    dispatch(setMessage(message)) \r\n    \r\n      timeid=window.setTimeout(() => {\r\n          dispatch(clearMessage())\r\n          timeid=0\r\n        }, time)\r\n    }\r\n  }","import React from 'react';\r\nimport { MessageAttributes } from \"../type\";\r\nimport {  Alert } from 'react-bootstrap'\r\n\r\nconst Message: React.FC<MessageAttributes> = (props) => {\r\n\r\n    if(!props.text) {\r\n        return (\r\n            <div>\r\n                <div></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <Alert variant=\"danger\"> {props.text} </Alert>\r\n    )\r\n};\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport queries from './graphql/queries';\r\nimport { useLazyQuery } from '@apollo/client'\r\nimport Search from './components/search';\r\nimport { MessageType } from './type';\r\nimport {  Container, Row } from 'react-bootstrap'\r\nimport { useDispatch,useSelector } from 'react-redux'\r\nimport { showMessage } from './thunks/message';\r\nimport Message from './components/message';\r\n\r\nconst App: React.FC = () => {\r\n\r\n\r\n  const [getTracks, { loading, error, data }] = useLazyQuery(queries.search, { fetchPolicy: \"network-only\", errorPolicy: 'all' })\r\n  \r\n  const dispatch = useDispatch()\r\n  const selector = (state: MessageType) => state\r\n  const rootstate = useSelector(selector)\r\n\r\n  if(error && error.message !== rootstate.message.text ) {\r\n    \r\n    dispatch(showMessage(error.message,5000))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Container className=\"search\">\r\n        <Row>\r\n          <div className=\"col-xs-2\">\r\n            <Message text={rootstate.message.text}/>\r\n            <Search searchAction={getTracks} searchResult={data} />\r\n          </div>\r\n        </Row>\r\n        \r\n      </Container>\r\n     \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","\r\n\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { createStore,combineReducers,applyMiddleware   } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport paginationReducer from './reducers/pagination'\r\nimport messageReducer from './reducers/message'\r\n\r\nconst reducer = combineReducers({\r\n    pagination: paginationReducer,\r\n    message: messageReducer\r\n  })\r\n\r\nconst store = createStore( reducer,composeWithDevTools(applyMiddleware(thunk)))\r\n\r\nexport default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache } from '@apollo/client'\r\nimport './index.css'\r\nimport store from './store'\r\nimport { Provider } from 'react-redux'\r\n\r\n// const httpLink = new HttpLink({ uri: 'http://localhost:4000/graphql' })\r\n\r\nconst httpLink = new HttpLink({ uri: 'https://testappproject1.herokuapp.com/graphql' })\r\n\r\nconst apollo = new ApolloClient({\r\n\r\n  cache: new InMemoryCache(),\r\n  link: httpLink\r\n})\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <ApolloProvider client={apollo}>\r\n      <App />\r\n    </ApolloProvider>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}